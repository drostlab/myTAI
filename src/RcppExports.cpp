// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppThread.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_nullTXIs
arma::mat cpp_nullTXIs(const arma::mat& count_matrix, const arma::vec& strata_vector, int num_permutations);
RcppExport SEXP _myTAI_cpp_nullTXIs(SEXP count_matrixSEXP, SEXP strata_vectorSEXP, SEXP num_permutationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type count_matrix(count_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type strata_vector(strata_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type num_permutations(num_permutationsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nullTXIs(count_matrix, strata_vector, num_permutations));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pseudobulk
arma::mat cpp_pseudobulk(const arma::sp_mat& expression, const arma::uvec& groups, int n_groups, int ncores);
RcppExport SEXP _myTAI_cpp_pseudobulk(SEXP expressionSEXP, SEXP groupsSEXP, SEXP n_groupsSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< int >::type n_groups(n_groupsSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pseudobulk(expression, groups, n_groups, ncores));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pseudobulk_batched
arma::mat cpp_pseudobulk_batched(const arma::sp_mat& expression, const arma::uvec& groups, int n_groups, int batch_size, int ncores);
RcppExport SEXP _myTAI_cpp_pseudobulk_batched(SEXP expressionSEXP, SEXP groupsSEXP, SEXP n_groupsSEXP, SEXP batch_sizeSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< int >::type n_groups(n_groupsSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pseudobulk_batched(expression, groups, n_groups, batch_size, ncores));
    return rcpp_result_gen;
END_RCPP
}
// cpp_txi_sc
Rcpp::NumericVector cpp_txi_sc(const arma::sp_mat& expression, const arma::vec& strata_values, int batch_size, int ncores);
RcppExport SEXP _myTAI_cpp_txi_sc(SEXP expressionSEXP, SEXP strata_valuesSEXP, SEXP batch_sizeSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type strata_values(strata_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_txi_sc(expression, strata_values, batch_size, ncores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_myTAI_cpp_nullTXIs", (DL_FUNC) &_myTAI_cpp_nullTXIs, 3},
    {"_myTAI_cpp_pseudobulk", (DL_FUNC) &_myTAI_cpp_pseudobulk, 4},
    {"_myTAI_cpp_pseudobulk_batched", (DL_FUNC) &_myTAI_cpp_pseudobulk_batched, 5},
    {"_myTAI_cpp_txi_sc", (DL_FUNC) &_myTAI_cpp_txi_sc, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_myTAI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
